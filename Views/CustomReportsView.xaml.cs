using System;
using System.ComponentModel;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace AssetManager.Views
{
    /// <summary>
    /// Interaction logic for CustomReportsView.xaml
    /// </summary>
    public partial class CustomReportsView : Window
    {
        DataSet ds;
        public CustomReportsView()
        {
            InitializeComponent();
            try
            {
                this.DataContext = new ViewModels.CustomReportViewModel();
                ((ViewModels.CustomReportViewModel)DataContext).PropertyChanged += CustomReportsView_PropertyChanged;
                ds = (DataContext as ViewModels.CustomReportViewModel).ReportData;
            }
            catch
            {

            }
        }

        private void CustomReportsView_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            try
            {
                ds = (DataContext as ViewModels.CustomReportViewModel).ReportData;
                ctr = 0;
            }
            catch
            {

            }
        }

        int ctr = 0;

        private void ReportGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ctr++;
        }

        private void ReportGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            try
            {
                var f = new FrameworkElementFactory(typeof(TextBlock));
                Binding b = new Binding(e.Column.Header.ToString())
                {
                    Mode = BindingMode.OneTime
                };
                string colname = e.PropertyName;
                if (ds.Tables[ctr].Columns[colname].ExtendedProperties.ContainsKey("FieldType")
                   && (int)ds.Tables[ctr].Columns[colname].ExtendedProperties["FieldType"] != (int)ReportFieldType.Hidden
                   && (int)ds.Tables[ctr].Columns[colname].ExtendedProperties["FieldType"] != (int)ReportFieldType.Removed)
                {
                                        
                    f.SetValue(TextBlock.PaddingProperty, new Thickness(4, 0, 4, 0));

                    if (ds.Tables[ctr].Columns[colname].ExtendedProperties.ContainsKey("Format"))
                        b.StringFormat = ds.Tables[ctr].Columns[colname].ExtendedProperties["Format"].ToString();

                    if (ds.Tables[ctr].Columns[colname].ExtendedProperties.ContainsKey("Alignment"))
                    {
                        if (ds.Tables[ctr].Columns[colname].ExtendedProperties["Alignment"].ToString() == "Left")
                            f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Left);
                        else
                        if (ds.Tables[ctr].Columns[colname].ExtendedProperties["Alignment"].ToString() == "Right")
                            f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Right);
                        else
                            f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);
                    }
                    else
                        f.SetValue(TextBlock.TextAlignmentProperty, TextAlignment.Center);

                    f.SetValue(TextBlock.TextProperty, b);

                    e.Column = new DataGridTemplateColumn()
                    {
                        Header = ds.Tables[ctr].Columns[colname].Caption,
                        HeaderStyle = FindResource("ColumnHeaderStyle") as Style,
                        CellTemplate = new DataTemplate() { VisualTree = f },
                    };
                }
                else
                    e.Cancel = true;
            }
            catch
            {
            }
        }

    }
}
