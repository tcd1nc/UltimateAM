<Window x:Class="AssetManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:convtr="clr-namespace:AssetManager.Converters"
        xmlns:behav ="clr-namespace:AssetManager.Behaviours"
        xmlns:viewmodels="clr-namespace:AssetManager.ViewModels"
      
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:dragdrop="clr-namespace:AssetManager.DragDrop"
        xmlns:ctrls="clr-namespace:AssetManager.UserControls"  
        BorderThickness="1"               
                      
        Icon="/AssetManager;component/Images/update.ico"              
        WindowState="Maximized"  
        x:Name="mainwindow"
        
        behav:DialogCloser.DialogClose="{Binding CloseWindowFlag}"
        behav:DialogCloser.DialogResult="{Binding DialogResult}"
        Title="Asset Manager">
    <Window.Resources>
        <convtr:StringToImageConverter x:Key="stringtoimageconverter"/>
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>
        <convtr:DataTypeConverter x:Key="DataTypeConverter"/>
        <!--<convtr:ByteArrayToImageConverter x:Key="ByteConverter"/>-->
    </Window.Resources>
       
    <DockPanel LastChildFill="True" >
        <Grid DockPanel.Dock="Top" Height="32">
            <Menu HorizontalAlignment="Left" Height="24"  Margin="1,1,1,1">
                <MenuItem Header="File">
                    <!--<MenuItem Header="New Asset" IsEnabled="{Binding IsEnabled}" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVis}}" x:Name="mnuNewAsset" Command="{Binding AddNewAsset}" CommandParameter="AddNewAsset" ToolTip="Add a new asset"/>-->
                    <MenuItem Header="S_ave" Command="{Binding SaveAll}" ToolTip="Save Changes" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVis}}" >
                        <MenuItem.Icon>
                            <Image Source="/AssetManager;component/Images/save.png" Height="16" Width="16" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="C_lose" Command="{Binding Shutdown}" ToolTip="Close" >
                        <MenuItem.Icon>
                            <Image Source="/AssetManager;component/Images/close.ico" Height="16" Width="16" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Settings" IsEnabled="{Binding IsEnabled}"  Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVis}}">
                    <MenuItem Header="Location Information">
                        <MenuItem Header="Customers" Command="{Binding OpenCustomerDialog}" CommandParameter="Customers" ToolTip="Edit or Add Customers"/>
                        <MenuItem Header="Corporations" Command="{Binding OpenDialog}" CommandParameter="Corporations" ToolTip="Edit or Add Corporations"/>
                        <MenuItem Header="Operating Companies" Command="{Binding OpenDialog}" CommandParameter="OperatingCompanies" ToolTip="Edit or Add Operating Companies"/>
                        <MenuItem Header="Countries" Command="{Binding OpenDialog}" CommandParameter="Countries" ToolTip="Edit or Add Countries"/>
                    </MenuItem>
                    <Separator />

                    <MenuItem Header="Asset Categorization">
                        <MenuItem Header="Asset Area" Command="{Binding OpenDialog}" CommandParameter="AssetAreas" ToolTip="Edit or Add Asset Areas"/>
                        <MenuItem Header="Asset Group" Command="{Binding OpenDialog}" CommandParameter="AssetGroups" ToolTip="Edit or Add Asset Groups"/>
                        <MenuItem Header="Asset Type" Command="{Binding OpenDialog}" CommandParameter="AssetTypes" ToolTip="Edit or Add Asset Types"/>
                    </MenuItem>

                    <Separator />

                    <MenuItem Header="Asset Specification Setup" >
                        <MenuItem Header="Asset Specification" Command="{Binding OpenDialog}" CommandParameter="AssetSpecifications" ToolTip="Edit or Add Asset Specifications that can be used for each Asset Group"/>
                        <MenuItem Header="Group Specifications" Command="{Binding OpenDialog}" CommandParameter="GroupSpecifications" ToolTip="Edit or Add Group Specifications"/>
                        <MenuItem Header="Specification Units" Command="{Binding OpenDialog}" CommandParameter="SpecificationProperties" ToolTip="Edit or Add Specification Properties"/>
                    </MenuItem>
                    <MenuItem Header="Administrators" Command="{Binding OpenDialog}" CommandParameter="Users" ToolTip="Edit or Add Administrators"/>
                </MenuItem>
                <MenuItem x:Name="Reports" Header="Reports" Command="{Binding OpenDialog}" CommandParameter="Reports" />
                <MenuItem x:Name="Tools" Header="Tools" Visibility="{Binding IsEnabled, Converter={StaticResource BoolToVis}}" IsEnabled="{Binding IsEnabled}">
                    <MenuItem Header="Deleted Assets" Command="{Binding OpenDialog}" CommandParameter="DeletedAssets" ToolTip="Undelete Assets" >
                        <MenuItem.Icon>
                            <Image Source="/AssetManager;component/Images/trash.png" Height="16" Width="16" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Header="Scheduled Activities" Command="{Binding OpenDialog}" CommandParameter="ScheduledActivities" ToolTip="Scheduled Activities"/>
                    <MenuItem Header="User Settings" Command="{Binding OpenDialog}" CommandParameter="UserSettings" ToolTip="Edit User Settings"/>

                </MenuItem>
                <MenuItem Header="About" Command="{Binding OpenDialog}" CommandParameter="About" ToolTip="About this program" />

            </Menu>
        </Grid>
        <Grid DockPanel.Dock="Top"  Margin="2,2,2,2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="150"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition Width="260"/>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="60"/>
                <ColumnDefinition Width="60"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="28"/>
            </Grid.RowDefinitions>

            <TextBlock Text="Search:"  Style="{StaticResource textlabel}" TextAlignment="Right" VerticalAlignment="Center" />
                <ComboBox Grid.Column="1" Style="{StaticResource cboStyle}" ItemsSource="{Binding SearchFields}"
                              DisplayMemberPath="Label" 
                              SelectedItem="{Binding SearchSelectedItem}"
                              SelectedValuePath="ID" />
                <TextBlock Grid.Column="2" Text="for:" Style="{StaticResource textlabel}" TextAlignment="Center" />

            <ctrls:MaskedTextBox Grid.Column="3" HorizontalAlignment="Left" Text="{Binding SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                         Clear="{Binding ClearSearch, Mode=TwoWay}" Mask="{Binding LabelMask}" Placeholder="_"  Width="120"/>
            
                <TextBlock Grid.Column="4" Text="{Binding SearchHits, StringFormat={}({0:N0} found)}"  
                               ToolTip="Total found in all Assets"
                               VerticalAlignment="Center" Margin="2,0,2,0">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SearchHits}" Value="0">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <Button Grid.Column="5" Content="Go!" Style="{StaticResource filterButtonStyle}" Command="{Binding SearchData}" ToolTip="Run Search" />
                <Button Grid.Column="6" Content="Clear" Style="{StaticResource filterButtonStyle}" Command="{Binding ClearFilter}" ToolTip="Clear filter"/>
                           
        </Grid>
        <Grid DockPanel.Dock="Bottom" Height="32">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="120"/>
                </Grid.ColumnDefinitions>
                <Button Content="Close" Command="{Binding CloseAll}" Grid.Column="2" Style="{StaticResource filterButtonStyle}" ToolTip="Close Asset Manager"/>
            </Grid>
        </Grid>
        <Border BorderBrush="Blue" BorderThickness="1"  Margin="4,4,4,4">

            <ctrls:UltimateTreeView x:Name="treeview2" CheckedItems="{Binding CheckedItems, Mode=TwoWay}"   
                    Padding="30,0,10,0"                                
                    behav:TreeViewDnDScroll.ScrollOnDragDrop="True"             
                    VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.IsVirtualizing="True" 
                    ItemsSource="{Binding AllItems, IsAsync=True, UpdateSourceTrigger=PropertyChanged}"   >
                <ctrls:UltimateTreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:TVCustomerViewModel}" ItemsSource="{Binding Children, IsAsync=True}">
                        <Grid x:Name="g1" Focusable="False" Tag="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"  >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="50"/>
                                <ColumnDefinition Width="250"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="50"/>
                            </Grid.RowDefinitions>
                            <Border Focusable="False" Grid.Column="0" Grid.Row="0" Margin="2,2,2,2" BorderBrush="Black" BorderThickness="1" CornerRadius="1"  >
                                <Image  Margin="1,1,1,1" Source="{Binding Customer.IconFile, Converter={StaticResource stringtoimageconverter}, FallbackValue={x:Null}}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                            </Border>
                            <TextBlock  Focusable="False" Grid.Column="1" Grid.Row="0" Text="{Binding Customer.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="2,1,1,1" FontSize="11" VerticalAlignment="Center" />

                            <i:Interaction.Behaviors>
                                <dragdrop:FrameworkElementDropBehavior/>
                            </i:Interaction.Behaviors>

                        </Grid>
                                                                    
                        <HierarchicalDataTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="g1" Property="Background" Value="LightBlue"/>
                            </Trigger>
                            <!--<DataTrigger Binding="{Binding IsFiltered}" Value="True" >
                                <Setter  Property="Foreground" Value="Red"/>
                                <Setter Property="Background" Value="#FFF9FF3B"/>
                            </DataTrigger>-->
                        </HierarchicalDataTemplate.Triggers>
                    </HierarchicalDataTemplate>

                    <HierarchicalDataTemplate x:Name="assetItem2"  DataType="{x:Type viewmodels:TVAssetViewModel}" ItemsSource="{Binding Children, IsAsync=True}" >
                        <Grid x:Name="g2" VerticalAlignment="Center" ToolTip="Double click to view Asset details" 
                            Tag="{Binding DataContext.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="24"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="b2" BorderBrush="Green" BorderThickness="1" CornerRadius="1" Margin="1,1,1,1" Width="500" >
                                <StackPanel Margin="4,1,1,1" Orientation="Horizontal" VerticalAlignment="Center" Cursor="Hand" >
                                    <TextBlock x:Name="gt1" Text="{Binding Asset.Label}" FontSize="11" Foreground="Blue" MinWidth="70" />
                                    <TextBlock x:Name="gt2" Text="{Binding Asset.Category}" FontSize="11" Foreground="DarkGreen" Margin="2,0,0,0" />
                                    <!--<TextBlock x:Name="gt4" Text="{Binding Asset.Name}" Margin="4,0" Foreground="Black" FontSize="11" MaxWidth="500"  />-->
                                </StackPanel>
                            </Border>

                            <i:Interaction.Behaviors>
                                 <!--Added IsEnabled dependency property to allow state to be changed--> 
                                <dragdrop:FrameworkElementDragBehavior IsEnabled="{Binding DataContext.IsEnabled, ElementName=mainwindow}"/>
                                <dragdrop:FrameworkElementDropBehavior/>
                            </i:Interaction.Behaviors>
                        </Grid>

                        <HierarchicalDataTemplate.Triggers>
                                                                                  
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="g2" Property="Background" Value="LightBlue"/>
                                <Setter TargetName="gt1" Property="Foreground" Value="White"/>
                                <Setter TargetName="gt2" Property="Foreground" Value="White"/>
                                <!--<Setter TargetName="gt4" Property="Foreground" Value="White"/>-->
                            </Trigger>
                            <DataTrigger Binding="{Binding IsFiltered}" Value="True" >
                                <Setter TargetName="b2" Property="BorderBrush" Value="Red"/>
                                <Setter TargetName="b2" Property="BorderThickness" Value="1"/>
                                <Setter TargetName="b2" Property="Background" Value="#FFF9FF3B"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <!-- This binding refers to the actual WPF element. -->
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                    <Condition Binding="{Binding Path=IsFiltered}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="b2" Property="Background" Value="Orange" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </HierarchicalDataTemplate.Triggers>
                    </HierarchicalDataTemplate>
                </ctrls:UltimateTreeView.Resources>

                <ctrls:UltimateTreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type ctrls:TViewItem}">
                        <Setter Property="behav:MouseDoubleClick.Command" Value="{Binding DataContext.DoubleClickCommand, ElementName=mainwindow}"/>
                        <Setter Property="behav:MouseDoubleClick.CommandParameter" Value="{Binding}"/>

                   
                        <Setter Property="CheckBoxVisibility" Value="{Binding CheckBoxVisibility}"/>
                        <Setter Property="IsChecked" Value="{Binding IsChecked}" />

                        <Setter Property="FontWeight" Value="Normal" />
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                        <Setter Property="behav:TreeViewItemBehavior.IsBroughtIntoViewWhenSelected" Value="True" />
                        <Setter Property="Tag" Value="{Binding DataContext,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}}"/>
                        <Setter Property="Visibility" Value="{Binding Visibility}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        <Setter Property="Padding" Value="1,0,0,0"/>
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                                              
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu  >
                                    <MenuItem Height="24"  VerticalContentAlignment="Center"                                       
                                              IsEnabled="{Binding PlacementTarget.Tag.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                              Command="{Binding PlacementTarget.Tag.AddNewAssetCM, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}" CommandParameter="{Binding}" 
                                              ToolTip="Add a new asset">
                                        <MenuItem.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock VerticalAlignment="Center" Text="Add New Asset"/>
                                            </DataTemplate>
                                        </MenuItem.HeaderTemplate>
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                     <!--Detect the type of item under the context menu and determine the visibility of the menu item--> 
                                                    <DataTrigger Binding="{Binding ., Converter={StaticResource DataTypeConverter}}" Value="{x:Type viewmodels:TVAssetViewModel}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding ., Converter={StaticResource DataTypeConverter}}" Value="{x:Type viewmodels:TVCustomerViewModel}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>

                                    <MenuItem Height="24" VerticalContentAlignment="Center"   
                                               IsEnabled="{Binding PlacementTarget.Tag.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                              Command="{Binding PlacementTarget.Tag.DeleteAsset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}" CommandParameter="{Binding}" 
                                              ToolTip="Delete asset">
                                        <MenuItem.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock VerticalAlignment="Center" Text="Delete Asset"/>
                                            </DataTemplate>
                                        </MenuItem.HeaderTemplate>
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                     <!--Detect the type of item under the context menu and determine the visibility of the menu item--> 
                                                    <DataTrigger Binding="{Binding ., Converter={StaticResource DataTypeConverter}}" Value="{x:Type viewmodels:TVAssetViewModel}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem Height="24" VerticalContentAlignment="Center"   
                                               IsEnabled="{Binding PlacementTarget.Tag.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                              Command="{Binding PlacementTarget.Tag.DeleteCustomer, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}" 
                                              CommandParameter="{Binding}" >
                                        <MenuItem.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock VerticalAlignment="Center" Text="Delete Customer"/>
                                            </DataTemplate>
                                        </MenuItem.HeaderTemplate>
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                     <!--Detect the type of item under the context menu and determine the visibility of the menu item--> 
                                                    <DataTrigger Binding="{Binding ., Converter={StaticResource DataTypeConverter}}" Value="{x:Type viewmodels:TVCustomerViewModel}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem Height="24" VerticalContentAlignment="Center"   
                                              IsEnabled="{Binding PlacementTarget.Tag.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                              Command="{Binding PlacementTarget.Tag.MoveSelectedAsset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}" CommandParameter="{Binding}" 
                                              ToolTip="Select asset to move">
                                        <MenuItem.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock VerticalAlignment="Center" Text="Select Asset"/>
                                            </DataTemplate>
                                        </MenuItem.HeaderTemplate>
                                        <MenuItem.Style>
                                            <Style TargetType="MenuItem">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                <Style.Triggers>
                                                     <!--Detect the type of item under the context menu and determine the visibility of the menu item--> 
                                                    <DataTrigger Binding="{Binding ., Converter={StaticResource DataTypeConverter}}" Value="{x:Type viewmodels:TVAssetViewModel}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </MenuItem.Style>
                                    </MenuItem>
                                    <MenuItem  Height="24" VerticalContentAlignment="Center"   
                                              IsEnabled="{Binding PlacementTarget.Tag.IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                              Command="{Binding PlacementTarget.Tag.PasteSelectedAsset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}" CommandParameter="{Binding}" 
                                              ToolTip="Paste asset">
                                        <MenuItem.HeaderTemplate>
                                            <DataTemplate>
                                                <TextBlock VerticalAlignment="Center" TextAlignment="Left" Text="{Binding PlacementTarget.Tag.MovingAssetLabel, StringFormat={}Paste Asset {0}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"/>
                                            </DataTemplate>
                                        </MenuItem.HeaderTemplate>
                                    </MenuItem>
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ctrls:TViewItem}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <ToggleButton x:Name="Expander" ClickMode="Press" Cursor="Hand" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                            <StackPanel Orientation="Horizontal">
                                                <CheckBox x:Name="PART_ItemCheckBox" VerticalAlignment="Center" IsThreeState="False" 
                                                Visibility="{Binding CheckBoxVisibility, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </StackPanel>
                                        </Border>
                                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="false">
                                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                        </Trigger>

                                        <Trigger Property="HasItems" Value="false">
                                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Background" TargetName="Bd" Value="LimeGreen"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="true"/>
                                                <Condition Property="IsSelectionActive" Value="false"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel/>
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <DataTrigger Binding="{Binding Visibility}" Value="Collapsed" >
                                <Setter  Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Visibility}" Value="Visible" >
                                <Setter  Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ctrls:UltimateTreeView.ItemContainerStyle>
            </ctrls:UltimateTreeView>
        </Border>
    </DockPanel>
</Window>
